server {
	listen 80;
	listen [::]:80;

	server_name {DUCKDNS_DOMAIN}.duckdns.org;

	location / {
		rewrite ^ https://$host$request_uri? permanent;
	}
}

server {
	http2 on;
	listen 443 ssl;
	listen [::]:443 ssl;
	server_name {DUCKDNS_DOMAIN}.duckdns.org;

	server_tokens off;

	ssl_session_cache shared:le_nginx_SSL:10m;
	ssl_session_timeout 1440m;
	ssl_session_tickets off;
	
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_prefer_server_ciphers off;
	
	ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384";
	ssl_certificate /etc/ssl/letsencrypt/fullchain.pem;
	ssl_certificate_key /etc/ssl/letsencrypt/privkey.pem;

	add_header X-Frame-Options "SAMEORIGIN" always;
	add_header X-XSS-Protection "1; mode=block" always;
	add_header X-Content-Type-Options "nosniff" always;
	add_header Referrer-Policy "no-referrer-when-downgrade" always;
	add_header Content-Security-Policy "default-src * data: 'unsafe-eval' 'unsafe-inline'" always;
	# add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
	# enable strict transport security only if you understand the implications

	# Docker resolver IP address
	resolver 127.0.0.11 valid=10s;

	location /api/ {
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_pass http://vpainless-server:8080;
	}

	location / {
		proxy_pass http://vpainless-front:80;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_intercept_errors on;
		error_page 404 =200 /;
	}
}
